name: Build the Frontend image, Push to ECR and Update deployment.yaml

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
    # tags:
    #   - 'frontend*'          # Trigger on push to any tag that starts with 'frontend'

jobs:

  build-and-push:

    runs-on: ubuntu-latest
    # if: startsWith(github.ref, 'refs/tags/frontend') # Ensure the tag starts with 'frontend'

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}                          # AWS region
      AWS_ECR_REPO_NAME: frontend   # AWS ECR repository name
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}        # AWS Account ID stored as a secret
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS Access Key ID stored as a secret
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS Secret Access Key stored as a secret
      MANIFEST_PATH: Kubernetes-Manifests-file/Frontend
      DOCKERFILE_PATH: Application-Code/frontend
      #REPOSITORY_URI: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/"
      #GIT_USER_NAME: "YourGitHubUsername"                 # Change to your GitHub username
      #GIT_REPO_NAME: "YourRepoName"                       # Change to your repository name

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout source code
      uses: actions/checkout@v4
    
    # Step 2: Configure AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Step 3: Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr                                            # Step ID : Assign an ID to reference the step output (registry-AWS ECR registry URL)
      uses: aws-actions/amazon-ecr-login@v2

    # Step 4: Build, tag, and push docker image to Amazon ECR
    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}       # Using Step ID to reference the step output (registry-AWS ECR registry URL)
        REPOSITORY: ${{ env.AWS_ECR_REPO_NAME }}
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        # docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./$DOCKERFILE_PATH
        # docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        docker system prune -f
        docker container prune -f
        docker build -t $REPOSITORY ./Application-Code/frontend
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG


    # Step 5: Find and replace the image tag in deployment.yaml with the the GITHUB RUN_Number
    - name: Find and replace the image tag in deployment.yaml with the GitHub RUN_Number
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}       # Using Step ID to reference the step output (registry-AWS ECR registry URL)
        REPOSITORY: ${{ env.AWS_ECR_REPO_NAME }}
        GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
        CONTAINER_IMAGE: ${REGISTRY}/${REPOSITORY}
        
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        # Navigate to the directory containing deployment.yaml
        #cd ${{ env.MANIFEST_PATH }}
        CONTAINER_IMAGE=$REGISTRY/$REPOSITORY
        # Find the current image tag after 'CONTAINER_IMAGE:' in deployment.yaml
        imageTag=$(grep -oP "(?<=$CONTAINER_IMAGE:)[^ ]+" ${{ env.MANIFEST_PATH }}/deployment.yaml)
        echo "Current image tag is $imageTag"
        # Replace the current image tag with the GitHub RUN_Number in the deployment.yaml file
        sed -i "s~$CONTAINER_IMAGE:$imageTag~$CONTAINER_IMAGE:${{ github.run_number }}~g" ${{ env.MANIFEST_PATH }}/deployment.yaml
        #sed -i "s~frontend:$imageTag~frontend:${{ github.run_number }}~g" ${{ env.MANIFEST_PATH }}/deployment.yaml
        cat ${{ env.MANIFEST_PATH }}/deployment.yaml
        echo "Updated deployment.yaml with the new GitHub RUN_Number ${{ github.run_number }}"
        git add .
        git commit -m "Update deployment.yaml with the new GITHUB RUN_Number"
        git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:main
        # git push https://${{ secrets.GIT_TOKEN }}@github.com/srish-kumar/ArgoCD-Deploy-EKS HEAD:main
    # # Step 6: Commit the changes and push to the repository
    # - name: Commit the changes and push to the repository
    #   uses: actions/checkout@v4
    #   run: |
    #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
    #     git config --global user.name "github-actions[bot]"
    #     git add .
    #     git commit -m "Update deployment.yaml with the new GITHUB SHA"
    #     git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.ref }}
